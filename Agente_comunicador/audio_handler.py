import speech_recognition as sr
from gtts import gTTS
import os 
import playsound

audio_file_counter = 0

def cargar_microfono_configurado():
    """Carga el √≠ndice del micr√≥fono configurado"""
    try:
        with open('.microfono_config.txt', 'r') as f:
            indice = int(f.read().strip())
        
        # Verificar que el √≠ndice sea v√°lido
        mic_list = sr.Microphone.list_microphone_names()
        if 0 <= indice < len(mic_list):
            print(f"üé§ Usando micr√≥fono configurado: [{indice}] {mic_list[indice]}")
            return indice
        else:
            print(f"‚ö†Ô∏è  √çndice de micr√≥fono inv√°lido ({indice}), usando por defecto")
            return None
            
    except FileNotFoundError:
        print("üìÅ No hay configuraci√≥n de micr√≥fono. Ejecuta 'python microphone_selector.py' para configurar")
        return None
    except Exception as e:
        print(f"‚ùå Error al cargar configuraci√≥n de micr√≥fono: {e}")
        return None

def escuchar_microfono():
    """
    Captura audio del micr√≥fono configurado y lo convierte a texto
    """
    r = sr.Recognizer()
    
    indice_mic = cargar_microfono_configurado()
    
    try:
        if indice_mic is not None:
            with sr.Microphone(device_index=indice_mic) as source:
                print(f"üé§ Di algo...")
                r.adjust_for_ambient_noise(source, duration=0.5)
                audio = r.listen(source, timeout=10, phrase_time_limit=8)
        else:
            with sr.Microphone() as source:
                print(f"üé§ Di algo (micr√≥fono por defecto)...")
                r.adjust_for_ambient_noise(source, duration=0.5)
                audio = r.listen(source, timeout=10, phrase_time_limit=8)
    
        texto = r.recognize_google(audio, language='es-MX')
        print(f"‚úÖ Acabas de decir: {texto}")
        return texto
        
    except sr.WaitTimeoutError:
        print("‚è±Ô∏è  Tiempo agotado - no se detect√≥ voz")
        return None
    except sr.UnknownValueError:
        print("‚ùì Lo siento, no entend√≠ lo que dijiste")
        return None
    except sr.RequestError as e:
        print(f"‚ùå Error en el servicio de reconocimiento de voz: {e}")
        return None
    except Exception as e:
        print(f"‚ùå Error general con el micr√≥fono: {e}")
        print("üí° Tip: Ejecuta 'python microphone_selector.py' para reconfigurar")
        return None

def hablar_texto(texto):
    """
    Convierte un texto a voz usando gTTS con acento de Espa√±a y lo reproduce
    """
    global audio_file_counter
    try: 
        tts = gTTS(text=texto, lang='es', tld='es')
        audio_file = f"response_{audio_file_counter}.mp3"
        tts.save(audio_file)
        audio_file_counter += 1
        
        print(f"ü§ñ Nexus dice: {texto}")
        playsound.playsound(audio_file)
        
        # Limpiar archivo temporal
        os.remove(audio_file)
        
    except Exception as e:
        print(f"‚ùå Ocurri√≥ un error al intentar hablar: {e}")

def listar_microfonos():
    """Imprime una lista de los micr√≥fonos disponibles y sus √≠ndices."""
    mic_list = sr.Microphone.list_microphone_names()
    if not mic_list:
        print("‚ùå No se encontraron micr√≥fonos disponibles.")
        return

    print("üé§ Micr√≥fonos disponibles:")
    print("=" * 50)
    for i, name in enumerate(mic_list):
        # Marcar el micr√≥fono configurado
        marca = " ‚≠ê" if es_microfono_configurado(i) else ""
        print(f"  [{i:2d}] {name}{marca}")
    
    print("=" * 50)
    print(f"Total: {len(mic_list)} micr√≥fonos")
    print("‚≠ê = Micr√≥fono configurado actualmente")

def es_microfono_configurado(indice):
    """Verifica si un √≠ndice es el micr√≥fono configurado"""
    try:
        with open('.microfono_config.txt', 'r') as f:
            indice_config = int(f.read().strip())
        return indice == indice_config
    except:
        return False

def mostrar_microfono_actual():
    """Muestra qu√© micr√≥fono est√° configurado actualmente"""
    indice = cargar_microfono_configurado()
    if indice is not None:
        mic_list = sr.Microphone.list_microphone_names()
        print(f"üé§ Micr√≥fono actual: [{indice}] {mic_list[indice]}")
    else:
        print("üé§ Usando micr√≥fono por defecto (no configurado)")

# Mostrar configuraci√≥n actual al importar el m√≥dulo
if __name__ == "__main__":
    listar_microfonos()
else:
    mostrar_microfono_actual()