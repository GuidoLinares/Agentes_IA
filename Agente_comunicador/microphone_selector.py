import speech_recognition as sr


def listar_y_seleccionar_microfono():
    """Lista todos los micr√≥fonos disponibles y permite seleccionar uno"""
    print("üé§ Micr√≥fonos disponibles:")
    print("=" * 60)
    
    mic_list = sr.Microphone.list_microphone_names()
    
    if not mic_list:
        print("‚ùå No se encontraron micr√≥fonos.")
        return None
    
    # Mostrar todos los micr√≥fonos
    for i, name in enumerate(mic_list):
        print(f"  [{i:2d}] {name}")
    
    print("=" * 60)
    print(f"Total: {len(mic_list)} micr√≥fonos detectados")
    
    while True:
        try:
            seleccion = input(f"\nüéØ Selecciona el micr√≥fono (0-{len(mic_list)-1}) o 'q' para salir: ").strip()
            
            if seleccion.lower() == 'q':
                return None
            
            indice = int(seleccion)
            
            if 0 <= indice < len(mic_list):
                nombre_mic = mic_list[indice]
                print(f"\n‚úÖ Micr√≥fono seleccionado: [{indice}] {nombre_mic}")
                
                # Probar el micr√≥fono seleccionado
                confirmar = input("¬øQuieres probarlo? (s/n): ").strip().lower()
                if confirmar in ['s', 'si', 'y', 'yes']:
                    if probar_microfono(indice, nombre_mic):
                        return indice
                    else:
                        print("‚ùå El micr√≥fono no funcion√≥ correctamente.")
                        continue
                else:
                    return indice
            else:
                print(f"‚ùå N√∫mero inv√°lido. Debe estar entre 0 y {len(mic_list)-1}")
                
        except ValueError:
            print("‚ùå Por favor ingresa un n√∫mero v√°lido.")
        except KeyboardInterrupt:
            print("\nüö´ Operaci√≥n cancelada.")
            return None

def probar_microfono(indice, nombre):
    """Prueba un micr√≥fono espec√≠fico"""
    print(f"\nüß™ Probando micr√≥fono: {nombre}")
    print("üì¢ Di algo en los pr√≥ximos 5 segundos...")
    
    r = sr.Recognizer()
    
    try:
        with sr.Microphone(device_index=indice) as source:
            r.adjust_for_ambient_noise(source, duration=1)
            print("üéß Escuchando...")
            
            # Escuchar por 5 segundos m√°ximo
            audio = r.listen(source, timeout=5, phrase_time_limit=3)
            
        print("üîÑ Procesando audio...")
        texto = r.recognize_google(audio, language='es-ES')
        
        print(f"‚úÖ ¬°Funcion√≥! Detect√©: '{texto}'")
        return True
        
    except sr.WaitTimeoutError:
        print("‚è±Ô∏è  Tiempo agotado - no se detect√≥ audio")
        return False
    except sr.UnknownValueError:
        print("‚ùì No se pudo entender el audio, pero el micr√≥fono funciona")
        return True  # El micr√≥fono funciona, solo no entendi√≥
    except sr.RequestError as e:
        print(f"‚ùå Error en el servicio de reconocimiento: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error con el micr√≥fono: {e}")
        return False

def guardar_configuracion_microfono(indice):
    """Guarda la configuraci√≥n del micr√≥fono en un archivo"""
    try:
        with open('.microfono_config.txt', 'w') as f:
            f.write(str(indice))
        print(f"üíæ Configuraci√≥n guardada: micr√≥fono √≠ndice {indice}")
    except Exception as e:
        print(f"‚ùå Error al guardar configuraci√≥n: {e}")

def cargar_configuracion_microfono():
    """Carga la configuraci√≥n del micr√≥fono desde archivo"""
    try:
        with open('.microfono_config.txt', 'r') as f:
            indice = int(f.read().strip())
        print(f"üìÅ Configuraci√≥n cargada: micr√≥fono √≠ndice {indice}")
        return indice
    except FileNotFoundError:
        print("üìÅ No hay configuraci√≥n previa guardada")
        return None
    except Exception as e:
        print(f"‚ùå Error al cargar configuraci√≥n: {e}")
        return None

if __name__ == "__main__":
    print("üé§ CONFIGURADOR DE MICR√ìFONO")
    print("=" * 40)
    
    # Intentar cargar configuraci√≥n previa
    indice_previo = cargar_configuracion_microfono()
    if indice_previo is not None:
        mic_list = sr.Microphone.list_microphone_names()
        if 0 <= indice_previo < len(mic_list):
            print(f"üîÑ Configuraci√≥n previa encontrada: [{indice_previo}] {mic_list[indice_previo]}")
            usar_previo = input("¬øUsar esta configuraci√≥n? (s/n): ").strip().lower()
            if usar_previo in ['s', 'si', 'y', 'yes']:
                print("‚úÖ Usando configuraci√≥n previa")
                exit()
    
    # Seleccionar nuevo micr√≥fono
    indice_seleccionado = listar_y_seleccionar_microfono()
    
    if indice_seleccionado is not None:
        guardar_configuracion_microfono(indice_seleccionado)
        print(f"\nüéâ ¬°Listo! Ahora tu aplicaci√≥n usar√° el micr√≥fono √≠ndice {indice_seleccionado}")
        print("üí° Tip: Puedes ejecutar este script cuando quieras cambiar de micr√≥fono")
    else:
        print("üö´ No se seleccion√≥ ning√∫n micr√≥fono")